-- Drop existing tables if they exist
DROP TABLE IF EXISTS score_category_values CASCADE;
DROP TABLE IF EXISTS score_details CASCADE;
DROP TABLE IF EXISTS scores CASCADE;
DROP TABLE IF EXISTS score_categories CASCADE;
DROP TABLE IF EXISTS evaluation_fields CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS roles CASCADE;

-- Create roles table
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT auth.uid(),
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    role_id BIGINT REFERENCES roles(id) ON DELETE SET NULL,
    status VARCHAR(50) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create field_type enum
DO $$ BEGIN
    CREATE TYPE field_type_enum AS ENUM ('number', 'boolean', 'rating');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create evaluation_fields table
CREATE TABLE evaluation_fields (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    field_type field_type_enum NOT NULL DEFAULT 'number',
    max_score INTEGER NOT NULL DEFAULT 5,
    score_weight DECIMAL(5,2) NOT NULL DEFAULT 1.0,
    role_id BIGINT REFERENCES roles(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create score_categories table
CREATE TABLE score_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    max_score INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create scores table
CREATE TABLE scores (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    score_date DATE NOT NULL,
    total_score DECIMAL(5,2) NOT NULL,
    target_score DECIMAL(5,2) NOT NULL DEFAULT 85,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create score_details table
CREATE TABLE score_details (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    score_id UUID REFERENCES scores(id) ON DELETE CASCADE,
    field_id BIGINT REFERENCES evaluation_fields(id) ON DELETE CASCADE,
    value DECIMAL(5,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Insert default roles
INSERT INTO roles (name) VALUES
('Engineer'),
('Service Admin'),
('Store'),
('Reception')
ON CONFLICT (name) DO NOTHING;

-- Insert default evaluation fields for Engineer role
DO $$
DECLARE
    engineer_role_id BIGINT;
BEGIN
    SELECT id INTO engineer_role_id FROM roles WHERE name = 'Engineer';
    
    INSERT INTO evaluation_fields (name, field_type, max_score, score_weight, role_id) VALUES
    ('Technical Knowledge', 'number', 10, 1.0, engineer_role_id),
    ('Problem Solving', 'number', 10, 1.0, engineer_role_id),
    ('Code Quality', 'number', 10, 1.0, engineer_role_id),
    ('Communication', 'number', 5, 1.0, engineer_role_id),
    ('Team Collaboration', 'number', 5, 1.0, engineer_role_id)
    ON CONFLICT DO NOTHING;
END $$;

-- Insert default score categories
INSERT INTO score_categories (name, max_score) VALUES
('Technical Skills', 30),
('Communication', 20),
('Problem Solving', 25),
('Team Collaboration', 15),
('Initiative', 10)
ON CONFLICT DO NOTHING;

-- Create function to get score statistics
CREATE OR REPLACE FUNCTION get_score_statistics()
RETURNS TABLE (
    total_scores BIGINT,
    average_score NUMERIC,
    highest_score NUMERIC,
    lowest_score NUMERIC
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT
        COUNT(*)::BIGINT as total_scores,
        ROUND(AVG(total_score)::NUMERIC, 2) as average_score,
        MAX(total_score)::NUMERIC as highest_score,
        MIN(total_score)::NUMERIC as lowest_score
    FROM scores
    WHERE score_date >= current_date - interval '30 days';
END;
$$;

-- Create function to get all engineers stats
CREATE OR REPLACE FUNCTION get_all_engineers_stats()
RETURNS SETOF json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    WITH monthly_scores AS (
        SELECT 
            u.id as user_id,
            COALESCE(AVG(s.total_score), 0) as avg_score,
            COALESCE(MAX(s.target_score), 85) as target_score
        FROM users u
        LEFT JOIN scores s ON s.user_id = u.id 
            AND s.score_date >= date_trunc('month', current_date)
        GROUP BY u.id
    ),
    category_scores AS (
        SELECT 
            s.user_id,
            json_agg(
                json_build_object(
                    'category', c.name,
                    'score', COALESCE(AVG(scv.score), 0),
                    'maxScore', c.max_score
                )
            ) as breakdown
        FROM users u
        CROSS JOIN score_categories c
        LEFT JOIN scores s ON s.user_id = u.id 
            AND s.score_date >= date_trunc('month', current_date)
        LEFT JOIN score_category_values scv ON scv.score_id = s.id 
            AND scv.category_id = c.id
        GROUP BY s.user_id, c.id
    )
    SELECT 
        json_build_object(
            'id', u.id,
            'name', u.full_name,
            'role', r.name,
            'monthToDateScore', ms.avg_score,
            'targetScore', ms.target_score,
            'scoreBreakdown', COALESCE(cs.breakdown, '[]'::json)
        )
    FROM users u
    JOIN roles r ON r.id = u.role_id
    LEFT JOIN monthly_scores ms ON ms.user_id = u.id
    LEFT JOIN category_scores cs ON cs.user_id = u.id
    WHERE r.name = 'Engineer'
    ORDER BY ms.avg_score DESC;
END;
$$;
