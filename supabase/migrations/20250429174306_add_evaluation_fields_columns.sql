-- Create evaluation_fields table
CREATE TABLE IF NOT EXISTS evaluation_fields (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    field_type VARCHAR(50) NOT NULL DEFAULT 'number',
    max_score INTEGER NOT NULL DEFAULT 5,
    role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_evaluation_fields_updated_at
    BEFORE UPDATE ON evaluation_fields
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Add RLS policies
ALTER TABLE evaluation_fields ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Evaluation fields are viewable by authenticated users."
    ON evaluation_fields FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Evaluation fields are insertable by authenticated users."
    ON evaluation_fields FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Evaluation fields are updatable by authenticated users."
    ON evaluation_fields FOR UPDATE
    TO authenticated
    USING (true);

CREATE POLICY "Evaluation fields are deletable by authenticated users."
    ON evaluation_fields FOR DELETE
    TO authenticated
    USING (true);
